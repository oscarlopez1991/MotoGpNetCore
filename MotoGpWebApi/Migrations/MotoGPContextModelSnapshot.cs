// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotoGpWebApi.Models;

namespace MotoGpWebApi.Migrations
{
    [DbContext(typeof(MotoGPContext))]
    partial class MotoGPContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MotoGpWebApi.Models.Circuit", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("tinyint");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<short>("Length")
                        .HasColumnType("smallint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<byte>("NumberOfCurves")
                        .HasColumnType("tinyint");

                    b.Property<TimeSpan>("RaceLapRecord")
                        .HasColumnType("time(7)");

                    b.Property<short>("StraightLonger")
                        .HasColumnType("smallint");

                    b.Property<byte>("Width")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Circuits");
                });

            modelBuilder.Entity("MotoGpWebApi.Models.Event", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnName("ID")
                        .HasColumnType("tinyint");

                    b.Property<byte>("CircuitId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CircuitId")
                        .IsUnique();

                    b.ToTable("Events");
                });

            modelBuilder.Entity("MotoGpWebApi.Models.Event", b =>
                {
                    b.HasOne("MotoGpWebApi.Models.Circuit", "Circuit")
                        .WithOne("Event")
                        .HasForeignKey("MotoGpWebApi.Models.Event", "CircuitId")
                        .HasConstraintName("FK_CircuitEvent")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
